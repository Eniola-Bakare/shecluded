{"version":3,"sources":["../node_modules/react-minimal-pie-chart/dist/index.js","../node_modules/numeral/numeral.js"],"names":["exports","React","degreesToRadians","degrees","Math","PI","valueBetween","value","min","max","extractPercentage","percentage","bisectorAngle","startAngle","lengthAngle","shiftVectorAlongAngle","angle","distance","angleRadians","dx","cos","dy","sin","isNumber","functionProp","prop","payload","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","ReactMinimalPieChartLabel","_ref","renderLabel","labelProps","label","dataEntry","dataIndex","props","createElement","assign","dominantBaseline","isValidElement","evaluateTextAnchorPosition","number","labelPosition","lineWidth","labelHorizontalShift","round","Number","EPSILON","innerRadius","renderLabels","data","map","index","_functionProp","segmentsShift","distanceFromCenter","radius","_shiftVectorAlongAngl","labelRenderProps","x","center","y","textAnchor","style","labelStyle","makeLabelRenderProps","partialCircle$1","cx","cy","r","start","end","fromX","fromY","toX","toY","large","abs","sweep","ReactMinimalPieChartPath","strokeDasharray","strokeDashoffset","_ref$shift","shift","reveal","rounded","title","pathRadius","pathCommands","patchedLengthAngle","command","join","makePathCommands","pathLength","d","fill","strokeWidth","strokeLinecap","undefined","combineSegmentTransitionsStyle","duration","easing","customStyle","transition","makeEventHandler","eventHandler","e","renderSegments","revealOverride","animate","getRevealValue","_props$center","paths","segmentsStyle","animationDuration","animationEasing","stroke","color","tabIndex","segmentsTabIndex","onBlur","onClick","onFocus","onKeyDown","onMouseOver","onMouseOut","background","unshift","defaultProps","paddingAngle","viewBoxSize","PieChart","originalProps","result","makePropsWithDefaults","_useState","useState","setRevealOverride","useEffect","extendedData","totalAngle","totalValue","chartStartAngle","total","sum","sumValues","normalizedTotalAngle","numberOfPaddings","singlePaddingDegrees","sign","degreesTakenByPaths","lastSegmentEnd","valueInPercentage","push","extendData","viewBox","width","height","className","children","pieChartDefaultProps","factory","__webpack_require__","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","_numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","this","_input","_value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","version","obj","numberToFormat","format","roundingFunction","leadingCount","abbrForce","int","precision","signed","thousands","output","locale","negP","optDec","abbr","decimal","neg","includes","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","string","abbreviation","stringOriginal","currency","symbol","pow","_isNaN","_x","apply","arguments","search","insert","subString","reduce","array","callback","TypeError","t","len","k","multiplier","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","substr","fn","clone","inputString","formatFunction","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","_format","space","splice","base","suffixes","binary","unformatRegex","concat","filter","item","_format2","bytes","suffix","bytesMultiplier","_format3","symbols","before","after","_format4","toExponential","_format5","_format6","_format7","hours","floor","minutes","seconds","timeArray","module"],"mappings":"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","file":"static/js/58.40495a6f.chunk.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) : typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactMinimalPieChart = {}, global.React));\n})(this, function (exports, React) {\n  'use strict';\n\n  function degreesToRadians(degrees) {\n    return degrees * Math.PI / 180;\n  }\n  function valueBetween(value, min, max) {\n    if (value > max) return max;\n    if (value < min) return min;\n    return value;\n  }\n  function extractPercentage(value, percentage) {\n    return percentage / 100 * value;\n  }\n  function bisectorAngle(startAngle, lengthAngle) {\n    return startAngle + lengthAngle / 2;\n  }\n  function shiftVectorAlongAngle(angle, distance) {\n    var angleRadians = degreesToRadians(angle);\n    return {\n      dx: distance * Math.cos(angleRadians),\n      dy: distance * Math.sin(angleRadians)\n    };\n  }\n  function isNumber(value) {\n    return typeof value === 'number';\n  }\n  function functionProp(prop, payload) {\n    return typeof prop === 'function' ? prop(payload) : prop;\n  }\n  function makePropsWithDefaults(props, defaultProps) {\n    var result = Object.assign({}, defaultProps, props);\n\n    // @NOTE Object.assign doesn't default properties with undefined value (like React defaultProps does)\n    for (var key in defaultProps) {\n      if (props[key] === undefined) {\n        result[key] = defaultProps[key];\n      }\n    }\n    return result;\n  }\n  function sumValues(data) {\n    var sum = 0;\n    for (var i = 0; i < data.length; i++) {\n      sum += data[i].value;\n    }\n    return sum;\n  }\n\n  // Append \"percentage\", \"degrees\" and \"startAngle\" to each data entry\n  function extendData(_ref) {\n    var data = _ref.data,\n      totalAngle = _ref.lengthAngle,\n      totalValue = _ref.totalValue,\n      paddingAngle = _ref.paddingAngle,\n      chartStartAngle = _ref.startAngle;\n    var total = totalValue || sumValues(data);\n    var normalizedTotalAngle = valueBetween(totalAngle, -360, 360);\n    var numberOfPaddings = Math.abs(normalizedTotalAngle) === 360 ? data.length : data.length - 1;\n    var singlePaddingDegrees = Math.abs(paddingAngle) * Math.sign(totalAngle);\n    var degreesTakenByPadding = singlePaddingDegrees * numberOfPaddings;\n    var degreesTakenByPaths = normalizedTotalAngle - degreesTakenByPadding;\n    var lastSegmentEnd = 0;\n    var extendedData = [];\n\n    // @NOTE: Shall we evaluate percentage accordingly to dataEntry.value's sign?\n    for (var i = 0; i < data.length; i++) {\n      var dataEntry = data[i];\n      var valueInPercentage = total === 0 ? 0 : dataEntry.value / total * 100;\n      var degrees = extractPercentage(degreesTakenByPaths, valueInPercentage);\n      var startAngle = lastSegmentEnd + chartStartAngle;\n      lastSegmentEnd = lastSegmentEnd + degrees + singlePaddingDegrees;\n      extendedData.push(Object.assign({\n        percentage: valueInPercentage,\n        startAngle: startAngle,\n        degrees: degrees\n      }, dataEntry));\n    }\n    return extendedData;\n  }\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n    return target;\n  }\n  function ReactMinimalPieChartLabel(_ref) {\n    var renderLabel = _ref.renderLabel,\n      labelProps = _ref.labelProps;\n    var label = renderLabel(labelProps);\n\n    // Default label\n    if (typeof label === 'string' || typeof label === 'number') {\n      labelProps.dataEntry;\n      labelProps.dataIndex;\n      var props = _objectWithoutPropertiesLoose(labelProps, [\"dataEntry\", \"dataIndex\"]);\n      return /*#__PURE__*/React.createElement(\"text\", Object.assign({\n        dominantBaseline: \"central\"\n      }, props), label);\n    }\n    if (React.isValidElement(label)) {\n      return label;\n    }\n    return null;\n  }\n  function round(number) {\n    var divisor = 1e14; // 14 decimals\n    return Math.round((number + Number.EPSILON) * divisor) / divisor;\n  }\n  function evaluateTextAnchorPosition(_ref) {\n    var labelPosition = _ref.labelPosition,\n      lineWidth = _ref.lineWidth,\n      labelHorizontalShift = _ref.labelHorizontalShift;\n    var dx = round(labelHorizontalShift);\n    // Label in the vertical center\n    if (dx === 0) {\n      return 'middle';\n    }\n    // Outward label\n    if (labelPosition > 100) {\n      return dx > 0 ? 'start' : 'end';\n    }\n    // Inward label\n    var innerRadius = 100 - lineWidth;\n    if (labelPosition < innerRadius) {\n      return dx > 0 ? 'end' : 'start';\n    }\n    // Overlying label\n    return 'middle';\n  }\n  function makeLabelRenderProps(data, props) {\n    return data.map(function (dataEntry, index) {\n      var _functionProp;\n      var segmentsShift = (_functionProp = functionProp(props.segmentsShift, index)) != null ? _functionProp : 0;\n      var distanceFromCenter = extractPercentage(props.radius, props.labelPosition) + segmentsShift;\n      var _shiftVectorAlongAngl = shiftVectorAlongAngle(bisectorAngle(dataEntry.startAngle, dataEntry.degrees), distanceFromCenter),\n        dx = _shiftVectorAlongAngl.dx,\n        dy = _shiftVectorAlongAngl.dy; // This object is passed as argument to the \"label\" function prop\n      var labelRenderProps = {\n        x: props.center[0],\n        y: props.center[1],\n        dx: dx,\n        dy: dy,\n        textAnchor: evaluateTextAnchorPosition({\n          labelPosition: props.labelPosition,\n          lineWidth: props.lineWidth,\n          labelHorizontalShift: dx\n        }),\n        dataEntry: dataEntry,\n        dataIndex: index,\n        style: functionProp(props.labelStyle, index)\n      };\n      return labelRenderProps;\n    });\n  }\n  function renderLabels(data, props) {\n    var label = props.label;\n    if (label) {\n      return makeLabelRenderProps(data, props).map(function (labelRenderProps, index) {\n        return /*#__PURE__*/React.createElement(ReactMinimalPieChartLabel, {\n          key: \"label-\" + (labelRenderProps.dataEntry.key || index),\n          renderLabel: label,\n          labelProps: labelRenderProps\n        });\n      });\n    }\n  }\n\n  // from http://stackoverflow.com/a/18473154\n  var partialCircle = function partialCircle(cx, cy, r, start, end) {\n    var length = end - start;\n    if (length === 0) return [];\n    var fromX = r * Math.cos(start) + cx;\n    var fromY = r * Math.sin(start) + cy;\n    var toX = r * Math.cos(end) + cx;\n    var toY = r * Math.sin(end) + cy;\n    var large = Math.abs(length) <= Math.PI ? '0' : '1';\n    var sweep = length < 0 ? '0' : '1';\n    return [['M', fromX, fromY], ['A', r, r, 0, large, sweep, toX, toY]];\n  };\n  var svgPartialCircle = partialCircle;\n  var partialCircle$1 = svgPartialCircle;\n  function makePathCommands(cx, cy, startAngle, lengthAngle, radius) {\n    var patchedLengthAngle = valueBetween(lengthAngle, -359.999, 359.999);\n    return partialCircle$1(cx, cy,\n    // center X and Y\n    radius, degreesToRadians(startAngle), degreesToRadians(startAngle + patchedLengthAngle)).map(function (command) {\n      return command.join(' ');\n    }).join(' ');\n  }\n  function ReactMinimalPieChartPath(_ref) {\n    var cx = _ref.cx,\n      cy = _ref.cy,\n      lengthAngle = _ref.lengthAngle,\n      lineWidth = _ref.lineWidth,\n      radius = _ref.radius,\n      _ref$shift = _ref.shift,\n      shift = _ref$shift === void 0 ? 0 : _ref$shift,\n      reveal = _ref.reveal,\n      rounded = _ref.rounded,\n      startAngle = _ref.startAngle,\n      title = _ref.title,\n      props = _objectWithoutPropertiesLoose(_ref, [\"cx\", \"cy\", \"lengthAngle\", \"lineWidth\", \"radius\", \"shift\", \"reveal\", \"rounded\", \"startAngle\", \"title\"]);\n    var pathRadius = radius - lineWidth / 2;\n    //@NOTE This shift might be rendered as a translation in future\n    var _shiftVectorAlongAngl = shiftVectorAlongAngle(bisectorAngle(startAngle, lengthAngle), shift),\n      dx = _shiftVectorAlongAngl.dx,\n      dy = _shiftVectorAlongAngl.dy;\n    var pathCommands = makePathCommands(cx + dx, cy + dy, startAngle, lengthAngle, pathRadius);\n    var strokeDasharray;\n    var strokeDashoffset;\n\n    // Animate/hide paths with \"stroke-dasharray\" + \"stroke-dashoffset\"\n    // https://css-tricks.com/svg-line-animation-works/\n    if (isNumber(reveal)) {\n      var pathLength = degreesToRadians(pathRadius) * lengthAngle;\n      strokeDasharray = Math.abs(pathLength);\n      strokeDashoffset = strokeDasharray - extractPercentage(strokeDasharray, reveal);\n    }\n    return /*#__PURE__*/React.createElement(\"path\", Object.assign({\n      d: pathCommands,\n      fill: \"none\",\n      strokeWidth: lineWidth,\n      strokeDasharray: strokeDasharray,\n      strokeDashoffset: strokeDashoffset,\n      strokeLinecap: rounded ? 'round' : undefined\n    }, props), title && /*#__PURE__*/React.createElement(\"title\", null, title));\n  }\n  function combineSegmentTransitionsStyle(duration, easing, customStyle) {\n    // Merge chart's animation CSS transition with \"transition\" found to customStyle\n    var transition = \"stroke-dashoffset \" + duration + \"ms \" + easing;\n    if (customStyle && customStyle.transition) {\n      transition = transition + \",\" + customStyle.transition;\n    }\n    return {\n      transition: transition\n    };\n  }\n  function getRevealValue(props) {\n    //@NOTE When animation is on, chart has to be fully revealed when reveal is not set\n    if (props.animate && !isNumber(props.reveal)) {\n      return 100;\n    }\n    return props.reveal;\n  }\n  function makeEventHandler(eventHandler, payload) {\n    return eventHandler && function (e) {\n      eventHandler(e, payload);\n    };\n  }\n  function renderSegments(data, props, revealOverride) {\n    // @NOTE this should go in Path component. Here for performance reasons\n    var reveal = revealOverride != null ? revealOverride : getRevealValue(props);\n    var radius = props.radius,\n      _props$center = props.center,\n      cx = _props$center[0],\n      cy = _props$center[1];\n    var lineWidth = extractPercentage(radius, props.lineWidth);\n    var paths = data.map(function (dataEntry, index) {\n      var segmentsStyle = functionProp(props.segmentsStyle, index);\n      return /*#__PURE__*/React.createElement(ReactMinimalPieChartPath, {\n        cx: cx,\n        cy: cy,\n        key: dataEntry.key || index,\n        lengthAngle: dataEntry.degrees,\n        lineWidth: lineWidth,\n        radius: radius,\n        rounded: props.rounded,\n        reveal: reveal,\n        shift: functionProp(props.segmentsShift, index),\n        startAngle: dataEntry.startAngle,\n        title: dataEntry.title,\n        style: Object.assign({}, segmentsStyle, props.animate && combineSegmentTransitionsStyle(props.animationDuration, props.animationEasing, segmentsStyle)),\n        stroke: dataEntry.color,\n        tabIndex: props.segmentsTabIndex,\n        onBlur: makeEventHandler(props.onBlur, index),\n        onClick: makeEventHandler(props.onClick, index),\n        onFocus: makeEventHandler(props.onFocus, index),\n        onKeyDown: makeEventHandler(props.onKeyDown, index),\n        onMouseOver: makeEventHandler(props.onMouseOver, index),\n        onMouseOut: makeEventHandler(props.onMouseOut, index)\n      });\n    });\n    if (props.background) {\n      paths.unshift( /*#__PURE__*/React.createElement(ReactMinimalPieChartPath, {\n        cx: cx,\n        cy: cy,\n        key: \"bg\",\n        lengthAngle: props.lengthAngle,\n        lineWidth: lineWidth,\n        radius: radius,\n        rounded: props.rounded,\n        startAngle: props.startAngle,\n        stroke: props.background\n      }));\n    }\n    return paths;\n  }\n  var defaultProps = {\n    animationDuration: 500,\n    animationEasing: 'ease-out',\n    center: [50, 50],\n    data: [],\n    labelPosition: 50,\n    lengthAngle: 360,\n    lineWidth: 100,\n    paddingAngle: 0,\n    radius: 50,\n    startAngle: 0,\n    viewBoxSize: [100, 100]\n  };\n  function ReactMinimalPieChart(originalProps) {\n    var props = makePropsWithDefaults(originalProps,\n    // @ts-expect-error: defaultProps.data is typed as BaseDataEntry\n    defaultProps);\n    var _useState = React.useState(props.animate ? 0 : null),\n      revealOverride = _useState[0],\n      setRevealOverride = _useState[1];\n    React.useEffect(function () {\n      if (props.animate) {\n        // Trigger initial animation\n        setRevealOverride(null);\n      }\n    }, []);\n    var extendedData = extendData(props);\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      viewBox: \"0 0 \" + props.viewBoxSize[0] + \" \" + props.viewBoxSize[1],\n      width: \"100%\",\n      height: \"100%\",\n      className: props.className,\n      style: props.style\n    }, renderSegments(extendedData, props, revealOverride), renderLabels(extendedData, props), props.children);\n  }\n  exports.PieChart = ReactMinimalPieChart;\n  exports.pieChartDefaultProps = defaultProps;\n});","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n\n  var _numeral,\n    _,\n    VERSION = '2.0.6',\n    formats = {},\n    locales = {},\n    defaults = {\n      currentLocale: 'en',\n      zeroFormat: null,\n      nullFormat: null,\n      defaultFormat: '0,0',\n      scalePercentBy100: true\n    },\n    options = {\n      currentLocale: defaults.currentLocale,\n      zeroFormat: defaults.zeroFormat,\n      nullFormat: defaults.nullFormat,\n      defaultFormat: defaults.defaultFormat,\n      scalePercentBy100: defaults.scalePercentBy100\n    };\n\n  /************************************\n      Constructors\n  ************************************/\n\n  // Numeral prototype object\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n  _numeral = function numeral(input) {\n    var value, kind, unformatFunction, regexp;\n    if (_numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n        unformatFunction = unformatFunction || _numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n    return new Numeral(input, value);\n  };\n\n  // version number\n  _numeral.version = VERSION;\n\n  // compare numeral object\n  _numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  };\n\n  // helper functions\n  _numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function numberToFormat(value, format, roundingFunction) {\n      var locale = locales[_numeral.options.currentLocale],\n        negP = false,\n        optDec = false,\n        leadingCount = 0,\n        abbr = '',\n        trillion = 1000000000000,\n        billion = 1000000000,\n        million = 1000000,\n        thousand = 1000,\n        decimal = '',\n        neg = false,\n        abbrForce,\n        // force abbreviation\n        abs,\n        min,\n        max,\n        power,\n        int,\n        precision,\n        signed,\n        thousands,\n        output;\n\n      // make sure we never format a null value\n      value = value || 0;\n      abs = Math.abs(value);\n\n      // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n      if (_numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (_numeral._.includes(format, '+') || _numeral._.includes(format, '-')) {\n        signed = _numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      }\n\n      // see if abbreviation is wanted\n      if (_numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false;\n\n        // check for space before abbreviation\n        if (_numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      }\n\n      // check for optional decimals\n      if (_numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      }\n\n      // break number and format\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n      if (precision) {\n        if (_numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = _numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = _numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n        int = decimal.split('.')[0];\n        if (_numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = _numeral._.toFixed(value, 0, roundingFunction);\n      }\n\n      // check abbreviation again after rounding\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      }\n\n      // format number\n      if (_numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n      output = int + decimal + (abbr ? abbr : '');\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function stringToNumber(string) {\n      var locale = locales[options.currentLocale],\n        stringOriginal = string,\n        abbreviations = {\n          thousand: 3,\n          million: 6,\n          billion: 9,\n          trillion: 12\n        },\n        abbreviation,\n        value,\n        i,\n        regexp;\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        }\n\n        // check for negative number\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n        // remove non numbers\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n      return value;\n    },\n    isNaN: function (_isNaN) {\n      function isNaN(_x) {\n        return _isNaN.apply(this, arguments);\n      }\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n      return isNaN;\n    }(function (value) {\n      return typeof value === 'number' && isNaN(value);\n    }),\n    includes: function includes(string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function insert(string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function reduce(array, callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n      var t = Object(array),\n        len = t.length >>> 0,\n        k = 0,\n        value;\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n        value = t[k++];\n      }\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n      return value;\n    },\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function multiplier(x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function correctionFactor() {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function toFixed(value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n        minDecimals = maxDecimals - (optionals || 0),\n        boundedPrecision,\n        optionalsRegExp,\n        power,\n        output;\n\n      // Use the smallest precision value possible to avoid errors from floating point representation\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n      power = Math.pow(10, boundedPrecision);\n\n      // Multiply up by precision, round accurately, then divide and use native toFixed():\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n      return output;\n    }\n  };\n\n  // avaliable options\n  _numeral.options = options;\n\n  // avaliable formats\n  _numeral.formats = formats;\n\n  // avaliable formats\n  _numeral.locales = locales;\n\n  // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n  _numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n    return options.currentLocale;\n  };\n\n  // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n  _numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n    key = key.toLowerCase();\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n    return locales[key];\n  };\n  _numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n  _numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n  _numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n  _numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n  _numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n    this[type + 's'][name] = format;\n    return format;\n  };\n  _numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp;\n\n    //coerce val to string\n    if (typeof val !== 'string') {\n      val += '';\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    }\n\n    //trim whitespaces from either sides\n    val = val.trim();\n\n    //if val is just digits return true\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    }\n\n    //if val is empty return false\n    if (val === '') {\n      return false;\n    }\n\n    //get the decimal and thousands separator from numeral.localeData\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = _numeral.localeData(culture);\n    } catch (e) {\n      localeData = _numeral.localeData(_numeral.locale());\n    }\n\n    //setup the delimiters and currency symbol based on culture/locale\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    }\n\n    // validating currency symbol\n    temp = val.match(/^[^\\d]+/);\n    if (temp !== null) {\n      val = val.substr(1);\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    }\n\n    //validating abbreviation symbol\n    temp = val.match(/[^\\d]+$/);\n    if (temp !== null) {\n      val = val.slice(0, -1);\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n  _numeral.fn = Numeral.prototype = {\n    clone: function clone() {\n      return _numeral(this);\n    },\n    format: function format(inputString, roundingFunction) {\n      var value = this._value,\n        format = inputString || options.defaultFormat,\n        kind,\n        output,\n        formatFunction;\n\n      // make sure we have a roundingFunction\n      roundingFunction = roundingFunction || Math.round;\n\n      // format based on value\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n        formatFunction = formatFunction || _numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n      return output;\n    },\n    value: function value() {\n      return this._value;\n    },\n    input: function input() {\n      return this._input;\n    },\n    set: function set(value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function add(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function subtract(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function multiply(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function divide(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function difference(value) {\n      return Math.abs(_numeral(this._value).subtract(value).value());\n    }\n  };\n\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  _numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function ordinal(number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n  (function () {\n    _numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function format(value, _format, roundingFunction) {\n        var space = _numeral._.includes(_format, ' BPS') ? ' ' : '',\n          output;\n        value = value * 10000;\n\n        // check for space before BPS\n        _format = _format.replace(/\\s?BPS/, '');\n        output = _numeral._.numberToFormat(value, _format, roundingFunction);\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n        return output;\n      },\n      unformat: function unformat(string) {\n        return +(_numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n  (function () {\n    var decimal = {\n        base: 1000,\n        suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n      },\n      binary = {\n        base: 1024,\n        suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n      };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|');\n    // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n    _numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function format(value, _format2, roundingFunction) {\n        var output,\n          bytes = _numeral._.includes(_format2, 'ib') ? binary : decimal,\n          suffix = _numeral._.includes(_format2, ' b') || _numeral._.includes(_format2, ' ib') ? ' ' : '',\n          power,\n          min,\n          max;\n\n        // check for space before\n        _format2 = _format2.replace(/\\s?i?b/, '');\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n            if (min > 0) {\n              value = value / min;\n            }\n            break;\n          }\n        }\n        output = _numeral._.numberToFormat(value, _format2, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function unformat(string) {\n        var value = _numeral._.stringToNumber(string),\n          power,\n          bytesMultiplier;\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (_numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n            if (_numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n          value *= bytesMultiplier || 1;\n        }\n        return value;\n      }\n    });\n  })();\n  (function () {\n    _numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function format(value, _format3, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n          symbols = {\n            before: _format3.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n            after: _format3.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n          },\n          output,\n          symbol,\n          i;\n\n        // strip format of spaces and $\n        _format3 = _format3.replace(/\\s?\\$\\s?/, '');\n\n        // format the number\n        output = _numeral._.numberToFormat(value, _format3, roundingFunction);\n\n        // update the before and after based on value\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !_numeral._.includes(symbols.before, '-') && !_numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        }\n\n        // loop through each before symbol\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n          switch (symbol) {\n            case '$':\n              output = _numeral._.insert(output, locale.currency.symbol, i);\n              break;\n            case ' ':\n              output = _numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        }\n\n        // loop through each after symbol\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : _numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : _numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n        return output;\n      }\n    });\n  })();\n  (function () {\n    _numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function format(value, _format4, roundingFunction) {\n        var output,\n          exponential = typeof value === 'number' && !_numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n          parts = exponential.split('e');\n        _format4 = _format4.replace(/e[\\+|\\-]{1}0/, '');\n        output = _numeral._.numberToFormat(Number(parts[0]), _format4, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function unformat(string) {\n        var parts = _numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n          value = Number(parts[0]),\n          power = Number(parts[1]);\n        power = _numeral._.includes(string, 'e-') ? power *= -1 : power;\n        function cback(accum, curr, currI, O) {\n          var corrFactor = _numeral._.correctionFactor(accum, curr),\n            num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n          return num;\n        }\n        return _numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n  (function () {\n    _numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function format(value, _format5, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n          output,\n          ordinal = _numeral._.includes(_format5, ' o') ? ' ' : '';\n\n        // check for space before\n        _format5 = _format5.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = _numeral._.numberToFormat(value, _format5, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n  (function () {\n    _numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function format(value, _format6, roundingFunction) {\n        var space = _numeral._.includes(_format6, ' %') ? ' ' : '',\n          output;\n        if (_numeral.options.scalePercentBy100) {\n          value = value * 100;\n        }\n\n        // check for space before %\n        _format6 = _format6.replace(/\\s?\\%/, '');\n        output = _numeral._.numberToFormat(value, _format6, roundingFunction);\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n        return output;\n      },\n      unformat: function unformat(string) {\n        var number = _numeral._.stringToNumber(string);\n        if (_numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n        return number;\n      }\n    });\n  })();\n  (function () {\n    _numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function format(value, _format7, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n          minutes = Math.floor((value - hours * 60 * 60) / 60),\n          seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function unformat(string) {\n        var timeArray = string.split(':'),\n          seconds = 0;\n\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60;\n          // minutes\n          seconds = seconds + Number(timeArray[1]) * 60;\n          // seconds\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60;\n          // seconds\n          seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n      }\n    });\n  })();\n  return _numeral;\n});"],"sourceRoot":""}